Script started on Wed 05 May 2021 10:47:48 PM EDT
]0;brown_na@cobra:~/CSC245/Projects/Dijkstra[?1034h[brown_na@cobra Dijkstra]$ cat dijkstra.cpp
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <fstream>
#include <iterator>
#include <cstdlib>
#include <algorithm>
#include <climits> 
#include <set>

using namespace std;

#include "graph.h"
#include "queue.h"
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
void Build(char *argv[], Graph<string>& myGraph, Queue<string>& myQ, int& numVert, int dist[], string vertex[]);
void PrintMenu(int& numVert, string vertex[]);
void Dijkstra(string& Start, Graph<string>& myGraph, int& numVert, int dist[], string vertex[], string previous[]);
void removeDuplicates(string arr[], int n);
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
int main(int argc, char *argv[])
{    
    
    //create datatypes
    Graph<string> myGraph(50);
    Queue<string> myQ(100);
    string vertex[50];
    int dist[50];
    string previous[50];
    int numVert = 0;
    
    //call build to build the graph
    Build(argv, myGraph, myQ, numVert, dist, vertex);
    
    //remove duplicates from vertex array
    removeDuplicates(vertex,50);
    
    //print menu
    PrintMenu(numVert, vertex);
    
    //take input from user about starting point
    string Start;
    cin>>Start;
    
    //proform algorithim
    Dijkstra(Start, myGraph, numVert, dist, vertex, previous);

}
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
void Build(char *argv[], Graph<string>& myGraph, Queue<string>& myQ, int& numVert, int dist[], string vertex[]){

  //open map file
  ifstream MapData;
  MapData.open(argv[1]);
  
  //add all tokens in the MapData file to a vector of strings
  string token;
  int numTokens;
  
  while(getline(MapData, token)){
    stringstream ss(token);
    while(getline(ss, token, ';')){
        numTokens++;
        myQ.enqueue(token);
    }
  }
  
  //sort data in the queue into its various branches
  for(int i = 0; i<numTokens; i+=2){
    if(!myQ.isEmpty()){
    
      vertex[i]=myQ.getFront();
      myQ.dequeue();
      
      vertex[i+1]=myQ.getFront();
      myQ.dequeue();
      
      string temp = myQ.getFront();
      myQ.dequeue();
      dist[i]=atoi(temp.c_str());
      
      //cout<<vertex[i]<<" "<<vertex[i+1]<<" "<<dist[i]<<endl;
    }
  }
  
  //create graph using the arrays
  for(int i = 0; i<numTokens; i++){ 
    if(myGraph.IndexIs(vertex[i])<0){
      myGraph.AddVertex(vertex[i]);
      numVert++;
    }
  }
  
  for(int i = 0; i<numTokens; i+=2){
  myGraph.AddEdge(vertex[i],vertex[i+1],dist[i]);
  }
  
}
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
void PrintMenu(int& numVert, string vertex[]){
  //prints menu
  cout<< "A weighted graph has been created for "<<numVert<<" cities:" << endl;
  for(int i = 0; i<numVert; i++){
  cout<<vertex[i]<<endl;
  }
  cout<<endl;
  cout<< "Please input a starting point: ";
}
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////

void Dijkstra(string& Start, Graph<string>& myGraph, int& numVert, int dist[], string vertex[], string previous[]){
  
  //Find starting location 
  int x = 0;
  for(int i = 0; i<numVert; i++)
  {
    if(vertex[i]==Start){
      x = i;
    }
  }

  //set the min distance of all points to infinity
  for(int i = 0; i<numVert; i++)
  {
    dist[i] = INT_MAX;
  }

  //set up starting point
  previous[x] = "N/A";
  dist[x] = 0;
  myGraph.MarkVertex(Start);

  //search the graph
  for(int i = 0; i<numVert; i++){
  
      //check current distances of unmarked nodes and update them
      for(int j=0; j<numVert; j++){
        if((!myGraph.IsMarked(vertex[j]))&&(myGraph.WeightIs(vertex[x],vertex[j])>0)&&(dist[x]+myGraph.WeightIs(vertex[x],vertex[j])<dist[j])){
        
          dist[j] = dist[x]+myGraph.WeightIs(vertex[x],vertex[j]);
          previous[j] = vertex[x];
        
        }
      }

      //find the unmarked node with the minimum distance and make it current node then mark it
      int d = INT_MAX;
      for(int j = 0; j<numVert; j++){
        if((!myGraph.IsMarked(vertex[j]))&&(dist[j]<d)){
          x = j;
          d = dist[j];
        }
      }
      
      //mark vertex with smallest dist
      myGraph.MarkVertex(vertex[x]);
 
  }
  
  for(int i = 0; i<numVert; i++){
  
    if(dist[i]==INT_MAX){
      dist[i] = (-1);
      previous[i] = "Not Connected";
    }
  
  }
  
  cout<<"Vertex          Distance          Previous"<<endl;
  cout<<endl;
  for (int i = 1; i<numVert; i++){
  cout<<vertex[i]<<"          "<<dist[i]<<"          "<<previous[i]<<endl;
  }
}
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////

void removeDuplicates(string arr[], int n)
{
    // Initialise a set
    // to store the array values
    set<string> s;
  
    // Insert the array elements
    // into the set
    for (int i = 0; i < n; i++) {
  
        // insert into set
        s.insert(arr[i]);
    }
  
    //set<string>::iterator it;
    vector<string> v(s.begin(), s.end());
    
    for(int i = 0; i<v.size();i++){
     arr[i]=v[i];
    }
    
    
    
    
}]0;brown_na@cobra:~/CSC245/Projects/Dijkstra[brown_na@cobra Dijkstra]$ cat dijkstra.cpp[1P.cpp[1P.cpp[1P.cpp[1P.cpp[1P.cpp[1P.cpp[1P.cpp[1P.cppg.cppr.cppa.cppp.cpph.cpp
using namespace std;

// This file contains the implementations of the member functions
// for class Graph that are given in the text.
const int NULL_EDGE = 0;

template<class VertexType>
Graph<VertexType>::Graph()
// Post: Arrays of size 50 are dynamically allocated for
//       marks and vertices. numVertices is set to 0;
//       maxVertices is set to 50.
{
    numVertices = 0;
    maxVertices = 50;
    ClearMarks();
}

template<class VertexType>
bool Graph<VertexType>::IsFull() const
{
	return (numVertices == maxVertices);
}

template<class VertexType>
bool Graph<VertexType>::IsEmpty() const
{
	return (numVertices == 0);
}

template<class VertexType>
void Graph<VertexType>::ClearMarks()
{
    for (int i = 0; i < maxVertices;  i++)
		marks[i] = false;
}


template<class VertexType>
void Graph<VertexType>::MarkVertex(VertexType s)
{
	int i = 0;  bool found = false;

	while ((i < maxVertices) && (! found))
	{
			if (vertices[i] == s)
	                { 	marks[i] = true;  found = true;  }
			i++;
	}
}	

template<class VertexType>
bool Graph<VertexType>::IsMarked(VertexType s) const
{
	int i = 0;  bool found = false;

	while ((i < maxVertices))
	{
			if (vertices[i] == s)
	                 	return (marks[i]);
			i++;
	}
	return false;
}

template<class VertexType>
Graph<VertexType>::Graph(int maxV)
// Post: Arrays of size maxV are dynamically allocated for
//       marks and vertices.
//       numVertices is set to 0; maxVertices is set to maxV.
{
    numVertices = 0;
    maxVertices = maxV;

    for (int i = 0; i < maxVertices;  i++)
		marks[i] = false;
    ClearMarks();
}

template<class VertexType>
Graph<VertexType>::~Graph()
// Post: arrays for vertices and marks have been deallocated.
//       (to be used only when constructor uses dynamic allocation)
{
    //delete [] vertices;
    //delete [] marks;
}

template<class VertexType>
void Graph<VertexType>::AddVertex(VertexType vertex)
// Post: vertex has been stored in vertices.
//       Corresponding row and column of edges have been set
//       to NULL_EDGE.
//       numVertices has been incremented.
{
    vertices[numVertices] = vertex;
    for (int index = 0; index < numVertices; index++)
    {
	edges[numVertices][index] = NULL_EDGE;
	edges[index][numVertices] = NULL_EDGE;
    }
    numVertices++;
}

template<class VertexType>  
int Graph<VertexType>::IndexIs(VertexType vertex) const
// Post: Function value = index of vertex in vertices.
{
    int index = 0;
    while (! (vertex == vertices[index])){
      if(!(index>numVertices)){
      index++;
      }
      else{
       return (-1);
      }
    }
    return index;
}

template<class VertexType>
void Graph<VertexType>::AddEdge(VertexType fromVertex,
     VertexType toVertex, int weight)
// Post: Edge (fromVertex, toVertex) is stored in edges.
{
    int row;
    int col;
    row = IndexIs(fromVertex);
    col = IndexIs(toVertex);
    edges[row][col] = weight;
}

template<class VertexType>
int Graph<VertexType>::WeightIs(VertexType fromVertex,
    VertexType toVertex) const
// Post: Function value = weight associated with the edge
//       (fromVertex, toVertex).
{
    int row;
    int col;
    row = IndexIs(fromVertex);
    col = IndexIs(toVertex);
    return edges[row][col];
}

template<class VertexType>
void Graph<VertexType>::GetToVertices(VertexType vertex,
     Queue<VertexType>& adjvertexQ) const
{
    int fromIndex;
    int toIndex;

    fromIndex = IndexIs(vertex);
    for (toIndex = 0; toIndex < numVertices; toIndex++)
	if (edges[fromIndex][toIndex] != NULL_EDGE)
	    adjvertexQ.enqueue(vertices[toIndex]);
}
]0;brown_na@cobra:~/CSC245/Projects/Dijkstra[brown_na@cobra Dijkstra]$ cat graph.cppdijkstra.cppexit[Kxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm--256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256ccolorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorrxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterrm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-2556colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256collorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxtterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm--256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256ccolorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorrxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterrm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-2556colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256collorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxtterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm--256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256ccolorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorrxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterrm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-2556colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256collorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxtterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm--256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256ccolorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorrxterm-256colorxterm-256colorexit[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[Acat dijkstra[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[8Pexit ./dijkstra ginfile1.datc++ -o dijkstra dijkstra.cpp
]0;brown_na@cobra:~/CSC245/Projects/Dijkstra[brown_na@cobra Dijkstra]$ c++ -o dijkstra dijkstra.cpp[15Pat graph.cppdijkstra.cppexit[Kxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm--256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256ccolorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorrxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterrm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-2556colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256collorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxtterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm--256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256ccolorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorrxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterrm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-2556colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256collorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxtterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm--256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256ccolorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorrxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterrm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-2556colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256collorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxtterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm--256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256ccolorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorxterm-256colorrxterm-256colorxterm-256colorexit[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[Acat dijkstra[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[8Pexit ./dijkstra ginfile1.datc++ -o dijkstra dijkstra.cpp[1Pd CSC245/Projects/Dijkstra++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpplear[K++ -o dijkstra dijkstra.cpp[1Pd CSC245/Projects/Dijkstra++ -o dijkstra dijkstra.cpp[4P ./dijkstra ginfile1.datc++ -o dijkstra dijkstra.cpp[4P ./dijkstra ginfile1.dat[1P.dat2.dat
A weighted graph has been created for 7 cities:

V1
V2
V3
V4
V5
V6

Please input a starting point: V2
Vertex          Distance          Previous

V1          9          V3
V2          0          N/A
V3          5          V4
V4          3          V2
V5          5          V4
V6          10          V3
]0;brown_na@cobra:~/CSC245/Projects/Dijkstra[brown_na@cobra Dijkstra]$  ./dijkstra ginfile2.datc++ -o dijkstra dijkstra.cpp[4P ./dijkstra ginfile2.dat
A weighted graph has been created for 7 cities:

V1
V2
V3
V4
V5
V6

Please input a starting point: V1
Vertex          Distance          Previous

V1          0          N/A
V2          2          V1
V3          3          V4
V4          1          V1
V5          3          V4
V6          8          V3
]0;brown_na@cobra:~/CSC245/Projects/Dijkstra[brown_na@cobra Dijkstra]$ exit
exit

Script done on Wed 05 May 2021 10:49:21 PM EDT
